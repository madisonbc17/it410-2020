openapi: 3.0.2
info:
  title: Class Website
  version: 1.0.0
servers:
  - url: /api
paths:
  /users:
    get:
      x-controller: users
      x-operation: getList
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
      tags:
        - Users
      requestBody: {}
    post:
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
            examples:
              amy_earheart:
                value:
                  firstName: Amy
                  lastName: Earheart
                  email: flyLady@gmail.com
                  phoneNumber: '5556432121'
                  teacher: false
      responses:
        '200':
          description: Correctly posted user
  '/users/{userId}':
    x-controller: users
    x-operation: getUser
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      tags:
        - Users
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
              examples:
                example-1: {}
            application/xml:
              schema:
                type: object
                properties: {}
              examples:
                example-1: {}
      summary: ''
    delete:
      tags:
        - Users
      responses:
        '200':
          description: Successfully deleted user
  /assignments:
    x-controller: assignment
    x-operation: getAssignmentList
    get:
      tags:
        - Assignments
      responses:
        '200':
          description: Successfully retrieved a list of current assignments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignments'
    post:
      summary: ''
      operationId: post-assignments
      responses:
        '200':
          description: OK
      description: Create a new assignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                dueDate:
                  type: string
                queryTitle:
                  type: string
        description: 'Assignment title, description and due date.'
      tags:
        - Assignments
  '/assignment/{queryTitle}':
    x-controller: assignment
    x-operation: getAssignment
    parameters:
      - schema:
          type: string
        name: queryTitle
        in: path
        required: true
    get:
      tags:
        - Assignments
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignments'
      description: Find an assignment with the query title.
    put:
      tags:
        - Assignments
      parameters:
        - schema:
            type: string
          in: query
          name: queryTitle
      responses:
        '200':
          description: Successfully updated Assignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                dueDate:
                  type: string
            examples:
              example-1:
                value:
                  title: New Title for Assignment
          application/xml:
            schema:
              type: object
              properties: {}
    delete:
      tags:
        - Assignments
      responses:
        '200':
          description: Successfully deleted assignment
      requestBody: {}
      parameters:
        - schema:
            type: string
          in: query
          name: queryTitle
  /logout:
    get:
      summary: Log user out
      tags:
        - Authentication
      responses:
        '200':
          description: Logged out
      operationId: get-logout
  /protected:
    get:
      summary: Test to see if you are authenticated
      tags:
        - Authentication
      responses:
        '200':
          description: You have access
        '401':
          description: Unauthorized
      operationId: get-protected
  /login:
    post:
      summary: Log user in
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
      operationId: post-login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  format: email
                  example: littleLamb@gmail.com
                password:
                  type: string
                  example: baabaa
  /user:
    put:
      summary: Update my user record
      tags:
        - Users
      responses:
        '200':
          description: OK
      operationId: put-user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                phoneNumber:
                  type: string
components:
  schemas:
    Events:
      type: object
      required:
        - title
        - date
      properties:
        id:
          type: number
          minimum: 1
        title:
          type: string
        date:
          type: string
        description:
          type: string
    Assignments:
      type: object
      properties:
        title:
          type: string
        queryTitle:
          type: string
        description:
          type: string
        dueDate:
          type: string
    Users:
      type: object
      example: firstName
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        teacher:
          type: boolean
    Students:
      type: object
      required:
        - name
      properties:
        id:
          type: number
          minimum: 1
        name:
          type: string
        user_id:
          type: number
    Comment:
      type: object
      required:
        - assignmentId
        - userId
        - text
      properties:
        id:
          type: number
          minimum: 1
        assignment_id:
          type: number
        user_id:
          type: number
        text:
          type: string
